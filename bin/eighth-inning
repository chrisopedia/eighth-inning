#!/usr/bin/env bash

# constants
readonly PROGNAME="$(basename "$0")"
readonly PROGDIR="/tmp/eighth-inning"
readonly VERSION=$(cat "$PROGDIR/VERSION.md")
readonly TODAY=$(date +"%m-%d-%y")
readonly LOG="$HOME/Library/Logs/${PROGNAME}.log"
readonly ARGS="$@"

# utility functions
_is_empty() {
	local var=$1
	[[ -z $var ]]
}
_is_not_empty() {
	local var=$1
	[[ -n $var ]]
}
_exists() {
	local var=$1
	[[ -e $var ]]
}
is_file() {
	local file=$1
	[[ -f $file ]]
}
_is_dir() {
	local dir=$1
	[[ -d $dir ]]
}
_is_not_valid_option() {
	local option=$1
	printf "bash: %s: %s: invalid option\n" "$PROGNAME" "$option"
}
_notify_me() {
	local command=$1
	local verb=$2
	local status=$3
	local timestamp="$(date)"

	terminal-notifier -title "$PROGNAME" -message "$command $verb $status at $timestamp" -activate "com.apple.Terminal"
}
_print_error() {
	local message=$1
	local timestamp="$(date)"
	echo "$timestamp" "ERROR: " "$message" >> "$LOG"
	printf "%s⊘ Error:%s %s. Aborting!\n\n" "$(tput setaf 1)" "$(tput sgr0)" "$message"
}
_print_progress() {
	local message=$1
	local timestamp="$(date)"
	echo "$timestamp" "PROCESSING: " "$message" >> "$LOG"
	printf "%s┃%s...\n" "$(tput setaf 6)" "$(tput sgr0) $message"
}
_print_success() {
	local message=$1
	local timestamp="$(date)"
	echo "$timestamp" "SUCCESS: " "$message" >> "$LOG"
	printf "%s✓ Success:%s\n" "$(tput setaf 2)" "$(tput sgr0) $message"
}
_seek_confirmation() {
	local message=$1
	printf "\n%s⚠ Warning:%s!\n" "$(tput setaf 3)" "$(tput sgr0) $message"
	read -p "Continue? (y/n) " -n 1
	printf "\n"
}
_is_confirmed() {
	if [[ "$REPLY" =~ ^[Yy]$ ]]; then
		return 0
	fi
	return 1
}
_require_prog() {
	local prog=$1
	local msg=$2
	local url=$3
	type -P "$prog" >/dev/null || {
		_print_error "$msg"
		echo "Download it at $url"
		exit 2
	}
}
_install_library() {
	local package=$1

	_print_progress "Installing $package"
	bash -c "$(curl -#fL raw.github.com/chrisopedia/"$package"/go/install)" \
		&& _notify_me "$package" "was" "installed"
}
_change_text() {
	local old=$1
	local new=$2
	local file=$3
	local regex="s/${old}/${new}/g"

	perl -pi -e "$regex" "$file"
}
_usage() {
	printf "%s: usage: %s [-h|--help] [--prefix] [-v|--version]"  "$PROGNAME" "$PROGNAME"
}
_print_help() {
	cat <<- EOF

	usage: $PROGNAME [options]

	Setup a brand new Mac

	OPTIONS:
    -h --help              Show this help
    -t --test              Run unit test to check the program
    -v --version           Display $PROGNAME version
    --prefix               Display $PROGNAME install path. Default: $PROGDIR

	Examples:
	Run all tests:
    $PROGNAME --test

	Print current version:
    $PROGNAME --version

	Run:
    $PROGNAME

	EOF
}
_print_directory() {
	echo "$PROGDIR"
}
_edit() {
	cd "$PROGDIR" \
	&& vim
}
_run_tests() {
	_require_prog roundup "Roundup is required to run tests" https://github.com/bmizerany/roundup \
		&& roundup ./tests/*.sh
}
_version() {
	printf 'Version %s\n' "$VERSION"
}
_setup_permissions() {
	# Ask for the administrator password upfront
	sudo -v

	# Keep-alive: update existing `sudo` time stamp until 'osxdefaults' has finished
	while true
	do
		sudo -n true
		sleep 60
		kill -0 "$$" || exit
	done 2>/dev/null &
}

# options
cmdline() {
	# got this idea from here:
	# http://kirk.webfinish.com/2009/10/bash-shell-script-to-use-getopts-with-gnu-style-long-positional-parameters/
	local arg=
	for arg
	do
		local delim=""
		case "$arg" in
			#translate --gnu-long-options to -g (short options)
			--edit)         args="${args}-e ";;
			--help)         args="${args}-h ";;
			--prefix)       args="${args}-p ";;
			--test)         args="${args}-t ";;
			--version)      args="${args}-v ";;
			#pass through anything else
			*) [[ "${arg:0:1}" == "-" ]] || delim="\""
				args="${args}${delim}${arg}${delim} ";;
		esac
	done

	#Reset the positional parameters to the short options
	eval set -- "$args"

	while getopts ":ehptv" OPTION
	do
		case $OPTION in
			e)
				_edit
				exit 0
				;;
			h)
				_print_help
				exit 0
				;;
			p)
				_print_directory
				exit 0
				;;
			t)
				_run_tests
				exit 0
				;;
			v)
				_version
				exit 0
				;;
			\?)
				_is_not_valid_option "-$OPTARG"
				usage
				exit 1
				;;
		esac
	done

	return 0
}
setup_directory_structure() {
	local dirs=$1
	local dir

	for dir in $dirs
	do
		_print_progress "Creating $HOME/Code/$dir"
		mkdir -p "$HOME/Code/$dir" \
			&& _print_success "Created $HOME/Code/$dir" \
			&& _notify_me "$HOME/Code/$dir" "was" "created"
	done
}
setup_screenshots() {
	local dir="$HOME/Pictures/Screenshots"

	_print_progress "Creating $dir"
	mkdir -p "$dir" \
		&& _print_success "Created $dir" \
		&& _notify_me "Screenshots directory" "was" "created"

	# open keyboard preferences to setup shortcuts for screen shots
	_print_progress "Opening up Keyboard preference pane to setup shortcuts"
	open "/System/Library/PreferencePanes/Keyboard.prefPane"
}
download_avatars() {
	# Download avatar for immediate use
	_print_progress "Downloading https://chrisopedia.github.io/cdn/images/avatar/800x800.png"
	curl -#flo "$HOME/Pictures/avatar.png" "https://chrisopedia.github.io/cdn/images/avatar/800x800.png" \
		&& sudo cp "$HOME/Pictures/avatar.png" "/Library/User\ Pictures/Fun/avatar.png" \
		&& _print_success "Downloaded https://chrisopedia.github.io/cdn/images/avatar/800x800.png"

	_print_progress "Downloading https://chrisopedia.github.io/cdn/images/avatar/full.png"
	curl -#flo "$HOME/Pictures/ralph-and-i.png" "https://chrisopedia.github.io/cdn/images/avatar/full.png" \
		&& _print_success "Downloaded https://chrisopedia.github.io/cdn/images/avatar/full.png"

	# http://www.tekrevue.com/tip/custom-login-screen-wallpaper-os-x-yosemite/
	_print_progress "Downloading https://chrisopedia.github.io/cdn/images/com.apple.desktop.admin.png"
	curl -#flo "$HOME/Pictures/com.apple.desktop.admin.png" "https://chrisopedia.github.io/cdn/images/wallpapers/com.apple.desktop.admin.png" \
		&& sudo cp "$HOME/Pictures/com.apple.desktop.admin.png" "Library/Caches/com.apple.desktop.admin.png" \
		&& _print_success "Downloaded https://chrisopedia.github.io/cdn/images/com.apple.desktop.admin.png"

	_notify_me "Avatars" "were" "downloaded"
}
remove_pdf() {
	local pdf="$HOME/Downloads/About Downloads.lpdf"

	# Remove the About Downloads pdf
	_is_file "$pdf" \
		&& _print_progress "Removed $pdf" \
		&& rm -rf "$pdf" \
		&& _print_success "Created $HOME/Code/$dir" \
		&& _notify_me "$dir" "was" "created"
}
install_tools() {
	local tools=$1
	local tool
	local dest="${HOME}/Code/tools"

	_is_dir "$dest" &&
		for tool in $tools
		do
			git clone "https://github.com/${tool}.git ${HOME}/Code/tools/${tool}"
		done
}
install_libraries() {
	local libraries=$1
	local library

	for library in $libraries
	do
		_install_library "$library"
	done
}
tap_libraries() {
	local libraries=$1
	local library

	for library in $libraries
	do
		_print_progress "Tapping homebrew/$library"
		brew tap "homebrew/$library" \
			&& _print_success "Tapped homebrew/$library" \
			&& _notify_me "$library" "was" "tapped"
	done
}
# @TODO: figure out how to install these things from within here
clone_bitbucket_repos() {
	local repos=$1
	local repo
	local url="https://chrisopedia@bitbucket.org/chrisopedia"
	local dir="$HOME/Code/private"

	for repo in $repos
	do
		_print_progress "Cloning $url/$repo to $dir/$repo"
		git clone "$url/${repo}.git" "$dir/$repo" \
			&& _print_success "Cloned $url/$repo to $dir/$repo" \
			&& _notify_me "$repo repo" "was" "cloned"
	done
}
clone_github_repos() {
	local input="$1"
	local type="repos"
	local dir="$HOME/Code/$type"

	_is_not_empty "${input}" && \
		type="${input}"

	for repo in $repos
	do
		_print_progress "Cloning all ${type}s"
		clone-all --feed "${type}" chrisopedia "$dir" \
			&& _print_progress "Cloned all ${type}s" \
			&& _notify_me "clone-all" "cloned" "all ${type}s"
	done
}
install_software() {
	local kegs=$1
	local keg

	_require_prog brew "Homebrew is required to tap libraries" http://brew.sh \
		&& brew cask install alfred \
		&& open -a "$HOME/Applications/Alfred Preferences.app"

	for keg in $kegs
	do
		_print_progress "kegger is installing $keg"
		kegger "$keg" \
			&& _print_success "kegger installed $keg" \
			&& _notify_me "$keg keg" "was" "downloaded"
	done
}
# Recursive call to install kegs
ask_to_install_more_software() {
	_notify_me "Kegger" "is" "requesting input"
	_seek_confirmation "Would you like to install anymore kegs"

	if _is_confirmed; then
		echo "Server ID: 57bba889c6017e6f99d7"
		echo "Optional ID: c7f7b4ba2a692e2eb60d"
		printf "\n%s⚠ Warning: Input another Github Gist ID!\n" "$(tput setaf 3)" "$(tput sgr0) $message"
		read USER_GIST_ID
		printf "\n"

		if [[ ! -z $USER_GIST_ID ]]; then
			_print_progress "kegger is installing $USER_GIST_ID"
			kegger "$USER_GIST_ID" \
				&& _print_success "kegger installed $USER_GIST_ID" \
				&& _notify_me "$USER_GIST_ID keg" "was" "downloaded"
		fi
		ask_to_install_more_software
	fi

	brew cleanup -s
	rm -rf "$(brew --cache)"
}
setup_fonts() {
	local fonts="$HOME/Code/private/fonts/default/*"
	local font
	local base="$(dirname "$fonts")"
	local dir="$HOME/Library/Fonts"

	_print_progress "Creating $dir"
	mkdir -p "$dir" \
		&& _print_success "$dir was created"

	for font in $fonts
	do
		font="$(basename "$font")"
		_print_progress "Hardlinking $base/$font to $dir/$font"
		ln "$base/$font" "$dir/$font"
	done
	_print_success "All fonts hardlinked to $dir/" \
		&& _notify_me "All fonts" "were" "hardlinked"
}
setup_games() {
	local games="$HOME/Code/private/games/mac-apps/*"
	local game
	local dir="$(dirname "$games")"

	for game in $games
	do
		game="$(basename "$game")"
		_print_progress "Symlinking $dir/$game to $HOME/Applications/$game"
		ln -hfs "$dir/$game" "$HOME/Applications/$game"
	done
	_print_success "All games symlinked to $dir" \
		&& _notify_me "All games" "were" "symlinked"
}
setup_hosts() {
	local hosts="eanewton rinsecup"
	local host
	local file="/private/etc/hosts"

	for host in $hosts
	do
		_print_progress "Setting up $host"
		printf "127.0.0.1 dev.%s.com:4000" "$host" | pbcopy
		sudo vim + -c "startinsert" -c ":r !pbpaste" -c ":xa" "$file" \
			&& _print_success "Set up $host" \
			&& _notify_me "$host" "was" "setup"
	done
	sudo apachectl restart
}
setup_ssh_config() {
	local file="$HOME/Code/private/httpd/ssh.conf"

	_print_progress "Setting up ssh configuration"
	cat "$file" >> "$HOME/.ssh/config" \
		&& _print_success "Set up ssh configuration" \
		&& _notify_me "$file" "was" "configured"
}
ask_to_setup_more_ssh() {
	_notify_me "Eighth Inning" "is" "requesting input"
	_seek_confirmation "Would you like to setup anymore ssh keys"

	if _is_confirmed; then
		printf "\n%s⚠ Warning: Specify another identity (e.g. Feeln, Rubicon, etc.)!\n" "$(tput setaf 3)" "$(tput sgr0) $message"
		read SSH_IDENTITY
		printf "\n"

		if [[ ! -z $SSH_IDENTITY ]]; then
			setup_ssh_keys "$SSH_IDENTITY"
		fi
	fi
}
setup_ssh_keys() {
	local identities=$1
	local identity

	for identity in $identities
	do
		_print_progress "Setting up $identity ssh key"
		ssh-keygen -t rsa -C "chrisohpedia@gmail.com" -f "$HOME/.ssh/$identity" \
			&& eval "$(ssh-agent -s)" \
			&& ssh-add -K "$HOME/.ssh/$identity" \
			&& pbcopy < "$HOME/.ssh/${identity}.pub" \
			&& _print_success "Set up $identity ssh key" \
			&& _notify_me "$identity ssh" "was" "set up"
	done
	ask_to_setup_more_ssh
}
copy_functions() {
	local dir="$PROGDIR/opt"
	local functions="$(find "$dir" -type f -execdir echo {} +)"
	local file

	for file in $functions
	do
		_print_progress "Copying $dir/$file to /usr/local/opt/$file"
		cp "$dir/$file" "/usr/local/opt/$file" \
			&& _print_success "Copied $dir/$file to /usr/local/opt/$file" \
			&& _notify_me "$file" "was" "symlinked"
	done
}
setup_bash_profile() {
	_print_progress "Moving bash_profile.local to $HOME/"
	mv "$PROGDIR/conf/bash_profile.local" "$HOME/.bash_profile.local" \
		&& _print_success "Moved bash_profile.local to $HOME/" \
		&& _notify_me "bash_profile.local" "was" "moved"
}
setup_osx_theme() {
	# setup the osx theme
	_print_progress "Setting OS X theme to Eighties dark"
	osx-theme "eighties" "dark" \
		&& _print_success "Set OS X theme to Eighties dark" \
		&& _notify_me "osx-theme" "set" "to Eighties dark"
}
setup_osx() {
	# update software
	sudo softwareupdate --install --all

	# setup the OS X app-specific settings
	_print_progress "Configuring app-specific settings"
	bash "$PROGDIR/lib/osx" \
		&& _print_success "Configured app-specific settings" \
		&& _notify_me "osx" "configured" "app-specific settings"

	# OS X preferences goes last because it will restart the machine
	_print_progress "Configuring global OS X settings"
	osx \
		&& _print_success "Configured global OS X settings" \
		&& _notify_me "osx" "configured" "global OS X settings"
}

# main
main() {
	cmdline "$ARGS"

	# setup computer directories
	setup_directory_structure "clients gists lagrco oss private projects repos"
	setup_screenshots
	download_avatars
	# install_tools "cern-hackdays/lmb MicrosoftEdge/static-code-scan" (commented as don't use it much)

	# install libraries
	_require_prog curl "curl is required to install libraries" http://curl.haxx.se \
		&& install_libraries "bash-utils clone-all dotfiles git-utils kegger osx osx-theme osx-utils"

	# clone bitbucket libraries
	_require_prog git "git is required to clone bitbucket repos" http://git-scm.com \
		&& clone_bitbucket_repos "app-licenses games fonts httpd"

	# clone all github repositories
	_require_prog clone-all "clone-all is required to download repos & gists" http://chrisopedia.github.io/clone-all \
		&& clone_github_repos "repos gists lagrco assemblerui"

	# Install personal & developer kegs
	_require_prog kegger "kegger is required to download & install apps" http://chrisopedia.github.io/kegger \
		&& install_software "0b61a78ed66fd94d8277 5ec0bc278d368187cdff 437cc62c5c39bdd2cc67 825c86d6cf41a488d992 63e5cc70f0ad92615242" \
		&& ask_to_install_more_software

	# setup fonts and games
	_install_library "alfred-workflows"
	setup_fonts
	setup_games

	# setup up Apache httpd configuration
	setup_hosts
	setup_ssh_config
	setup_ssh_keys "github bitbucket"

	# symlink functions
	# symlink_functions

	# move bash_profile
	setup_bash_profile

	# setup the osx theme
	_require_prog osx-theme "osx-theme is required to setup OS X" http://chrisopedia.github.io/osx-theme \
		&& setup_osx_theme

	# run the osx setup
	_require_prog osx "osx is required to setup OS X" http://chrisopedia.github.io/osx \
		&& setup_osx
}

main
